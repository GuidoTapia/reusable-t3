// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ChangeTypeEnum {
  CREATE
  UPDATE
  DELETE

  @@map("change_type_enum")
}

model Post {
    id        String      @id @default(uuid()) @db.Uuid
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @default(now()) @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String  @map("created_by_id")  @db.Uuid

    @@index([name])
    @@map("posts")
}

model PostShadow {
    id        String      @id @default(uuid()) @db.Uuid

    sourceUserId  String    @map("source_user_id") @db.Uuid
    timestamp     DateTime  @default(now())
    updatedById   String                      @map("updated_by_id") @db.Uuid

    name      String
    createdAt DateTime  @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    deletedAt DateTime?  @map("deleted_at")
    createdById String  @map("created_by_id")  @db.Uuid

    @@index([name])
    @@map("posts_shadow")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(uuid()) @db.Uuid
    userId                   String  @map("user_id")  @db.Uuid
    type                     String
    provider                 String
    providerAccountId        String @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(uuid()) @db.Uuid
    sessionToken String   @unique @map("session_token")
    userId       String @map("user_id")  @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("sessions")
}

model User {
    id            String    @id @default(uuid()) @db.Uuid
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified_at")
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @default(now()) @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    @@map("users")
}

model UserShadow {
    id            String    @id @default(uuid()) @db.Uuid
    
    sourceUserId  String    @map("source_user_id") @db.Uuid
    timestamp     DateTime  @default(now())
    updatedById   String                      @map("updated_by_id") @db.Uuid
    
    changeType    ChangeTypeEnum              @map("change_type")
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified_at")
    image         String?
    createdAt DateTime  @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    @@map("users_shadow")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
